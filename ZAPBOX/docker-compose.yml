##########################
#      NETWORKS          #
##########################
networks:
  traefik:        # Exposição externa (TLS)
    driver: bridge
  backend:        # Tráfego interno isolado
    driver: bridge

##########################
#       VOLUMES          #
##########################
volumes:
  traefik_letsencrypt:
  redis_data:
  postgres_data:
  rabbitmq_data:
  rabbitmq_logs:

##########################
#       SERVICES         #
##########################
services:

  #################################################
  #                 TRAEFIK 3                     #
  #################################################
  traefik:
    image: traefik:${TRAEFIK_VERSION:-v3}                 # v3.x
    container_name: traefik
    restart: unless-stopped
    networks:
      - traefik
      - backend
    ports:
      # Entrada pública
      - "80:80"          # HTTP  → redireciona para HTTPS
      - "443:443"        # HTTPS
      # TCP pass-through (TLS encerrado no Traefik)
      - "6379:6379"      # Redis
      - "5672:5672"      # RabbitMQ AMQP
      - "5432:5432"      # PostgreSQL
    environment:
      - CLOUDFLARE_DNS_API_TOKEN=${CLOUDFLARE_DNS_API_TOKEN}
    command:
      # Enable Dashboard
      - "--api=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      # EntryPoints HTTP/HTTPS
      - "--entrypoints.web.address=:80"
      - "--entrypoints.web.http.redirections.entrypoint.to=websecure"
      - "--entrypoints.web.http.redirections.entrypoint.scheme=https"
      - "--entrypoints.websecure.address=:443"
      # TCP entry-points
      - "--entrypoints.redis.address=:6379"
      - "--entrypoints.rabbitmq.address=:5672"
      - "--entrypoints.postgres.address=:5432"
      - "--ping=true"
      # ACME (Let's Encrypt) – DNS-01 via Cloudflare
      - "--certificatesresolvers.cf.acme.email=${LETSENCRYPT_EMAIL}"
      - "--certificatesresolvers.cf.acme.storage=/letsencrypt/acme.json"
      - "--certificatesresolvers.cf.acme.dnschallenge.provider=cloudflare"
      - "--log.level=INFO"
    volumes:
      - traefik_letsencrypt:/letsencrypt
      - /var/run/docker.sock:/var/run/docker.sock:ro
    healthcheck:
      test: ["CMD", "traefik", "healthcheck", "--ping"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s
    labels:
      # (Opcional) Habilite e proteja o dashboard via BasicAuth
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=Host(`${TRAEFIK_DASHBOARD_DOMAIN}`)"
      - "traefik.http.routers.traefik.entrypoints=websecure"
      - "traefik.http.routers.traefik.tls.certresolver=cf"
      - "traefik.http.routers.traefik.service=api@internal"
      - "traefik.http.middlewares.traefik-auth.basicauth.users=${TRAEFIK_DASHBOARD_USERS}"
      - "traefik.http.routers.traefik.middlewares=traefik-auth"

  #################################################
  #                   REDIS 7                     #
  #################################################
  redis:
    image: redis:${REDIS_VERSION:-7}
    container_name: redis
    restart: unless-stopped
    networks:
      - backend
      - traefik
    command: >
      --requirepass ${REDIS_PASSWORD}
      --appendonly yes
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 5s
      retries: 5
    labels:
      - "traefik.enable=true"
      - "traefik.tcp.routers.redis.rule=HostSNI(`${DOMAIN_REDIS}`)"
      - "traefik.tcp.routers.redis.entrypoints=redis"
      - "traefik.tcp.routers.redis.tls.certresolver=cf"

  #################################################
  #             RABBITMQ 4-management             #
  #################################################
  rabbitmq:
    image: rabbitmq:${RABBITMQ_VERSION:-4-management}
    container_name: rabbitmq
    restart: unless-stopped
    networks:
      - backend
      - traefik
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
      RABBITMQ_DEFAULT_VHOST: "/"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
      - rabbitmq_logs:/var/log/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 5s
      retries: 5
    labels:
      # AMQP (TCP 5672)
      - "traefik.enable=true"
      - "traefik.tcp.routers.rabbitmq-amqp.rule=HostSNI(`${DOMAIN_RABBIT}`)"
      - "traefik.tcp.routers.rabbitmq-amqp.entrypoints=rabbitmq"
      - "traefik.tcp.routers.rabbitmq-amqp.tls.certresolver=cf"
      - "traefik.tcp.services.rabbitmq-amqp.loadbalancer.server.port=5672"
      # Management UI (HTTPS 443 → 15672)
      - "traefik.http.routers.rabbitmq.rule=Host(`${DOMAIN_RABBIT}`)"
      - "traefik.http.routers.rabbitmq.entrypoints=websecure"
      - "traefik.http.routers.rabbitmq.tls.certresolver=cf"
      - "traefik.http.services.rabbitmq.loadbalancer.server.port=15672"

  #################################################
  #               POSTGRESQL 17                  #
  #################################################
  postgres:
    image: postgres:${POSTGRES_VERSION:-17}
    container_name: postgres
    restart: unless-stopped
    networks:
      - backend
      - traefik
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER}", "-d", "${POSTGRES_DB}"]
      # test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER}"]
      interval: 30s
      timeout: 5s
      retries: 5
    labels:
      - "traefik.enable=true"
      - "traefik.tcp.routers.postgres.rule=HostSNI(`${DOMAIN_POSTGRES}`)"
      - "traefik.tcp.routers.postgres.entrypoints=postgres"
      - "traefik.tcp.routers.postgres.tls.certresolver=cf"